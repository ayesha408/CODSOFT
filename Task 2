import numpy as np 

# Define the board size
BOARD_SIZE = 3

# Initialize the game board
def initialize_board():
    return np.full((BOARD_SIZE, BOARD_SIZE), '', dtype=str)

# Print the game board
def print_board(board):
    for row in board:
        print(' | '.join(row))
        print('-' * (BOARD_SIZE * 2 - 1))

# Check if the board is full
def is_board_full(board):
    return not any(cell == '' for row in board for cell in row)

# Check for a win
def check_win(board, player):
    for i in range(BOARD_SIZE):
        # Check rows and columns
        if all(board[i, j] == player for j in range(BOARD_SIZE)) or \
           all(board[j, i] == player for j in range(BOARD_SIZE)):
            return True
    # Check diagonals
    if all(board[i, i] == player for i in range(BOARD_SIZE)) or \
       all(board[i, BOARD_SIZE - 1 - i] == player for i in range(BOARD_SIZE)):
        return True
    return False

# Get available moves
def get_available_moves(board):
    return [(r, c) for r in range(BOARD_SIZE) for c in range(BOARD_SIZE) if board[r, c] == '']
def minimax(board, depth, is_maximizing):
    if check_win(board, 'O'):
        return 10 - depth
    if check_win(board, 'X'):
        return depth - 10
    if is_board_full(board):
        return 0

    if is_maximizing:
        best_score = -np.inf
        for (r, c) in get_available_moves(board):
            board[r, c] = 'O'
            score = minimax(board, depth + 1, False)
            board[r, c] = ''
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = np.inf
        for (r, c) in get_available_moves(board):
            board[r, c] = 'X'
            score = minimax(board, depth + 1, True)
            board[r, c] = ''
            best_score = min(score, best_score)
        return best_score

def find_best_move(board):
    best_score = -np.inf
    best_move = None
    for (r, c) in get_available_moves(board):
        board[r, c] = 'O'
        score = minimax(board, 0, False)
        board[r, c] = ''
        if score > best_score:
            best_score = score
            best_move = (r, c)
    return best_move
def play_game():
    board = initialize_board()
    current_player = 'X'  # Human player
    game_over = False

    while not game_over:
        print_board(board)
        if current_player == 'X':
            while True:
                try:
                    print("Your move! Enter row and column (0, 1, 2):")
                    row, col = map(int, input().strip().split())
                    if (row not in range(BOARD_SIZE)) or (col not in range(BOARD_SIZE)):
                        print("Invalid move! Row and column must be between 0 and 2.")
                        continue
                    if board[row, col] != '':
                        print("Invalid move! The cell is already occupied.")
                        continue
                    break
                except ValueError:
                    print("Invalid input! Please enter two numbers separated by a space.")
            board[row, col] = 'X'
        else:
            print("AI is making a move...")
            move = find_best_move(board)
            if move:
                row, col = move
                board[row, col] = 'O'
        
        if check_win(board, 'X'):
            print_board(board)
            print("You win!")
            game_over = True
        elif check_win(board, 'O'):
            print_board(board)
            print("AI wins!")
            game_over = True
        elif is_board_full(board):
            print_board(board)
            print("It's a draw!")
            game_over = True
        
        current_player = 'O' if current_player == 'X' else 'X'

# Run the game
play_game()
